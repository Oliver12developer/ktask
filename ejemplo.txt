ayudame con estas cosa en mi proyecto:

este codigo se llama ktask.py, y es donde se ejecuta todo.

import json
import re
import urllib3
from services.google_sheets import read_from_sheet, write_tasks_to_sheet
from services.bitrix import get_user_id_by_name, create_task_in_bitrix, get_tasks_from_bitrix, get_group_id_by_name
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# 🔹 Función para cargar JSON de manera segura
def load_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        print(f"Error al cargar {filename}")
        exit(1)

# 🔹 Cargar configuraciones desde archivos JSON
sheet_config = load_json("settings/SheetURL.json")
settings_config = load_json("settings/settings.json")
user_config = load_json("user_config/user_id.json")

# 🔹 Extraer SHEET_ID desde la URL
def extract_sheet_id(sheet_url):
    match = re.search(r"/d/([a-zA-Z0-9-_]+)/", sheet_url)
    return match.group(1) if match else None

SHEET_ID = extract_sheet_id(sheet_config["SHEET_URL"])
if not SHEET_ID:
    print("Error: No se pudo extraer el ID de la hoja de cálculo.")
    exit(1)

# 🔹 Obtener USER_ID
USER_ID = user_config.get("USER_ID")
if not USER_ID:
    print("Error: No se encontró 'USER_ID' en user_id.json")
    exit(1)

# 🔹 Construcción de URLs de Bitrix con USER_ID dinámico
BITRIX_BASE_URL = settings_config["BITRIX_BASE_URL"].replace("{USER_ID}", USER_ID)
BITRIX_URLS = {key: f"{BITRIX_BASE_URL}{endpoint}" for key, endpoint in settings_config["ENDPOINTS"].items()}

# Ruta al archivo JSON de tu cuenta de servicio
SERVICE_ACCOUNT_FILE = "fit-guide-433118-p4-193f4862b36c.json"

# Alcances (scopes) necesarios
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# Autenticación
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# Construir el servicio de Google Sheets
service = build("sheets", "v4", credentials=credentials)


#Librería para desactivar la autenticación de certificado
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# Cargar configuraciones desde settings.json
with open("settings/settings.json", "r") as file:
    config = json.load(file)

#Cargar URL desde SheetURL.json
with open("settings/SheetURL.json", "r") as file:
    urlSheet = json.load(file)

#Rango de celdas para lectura y escritura
READ_RANGE_NAME = "Hoja 2!A2:R"
WRITE_RANGE_NAME = "Hoja 2!A2"


headers = {"Content-Type": "application/json", "Accept": "application/json"}

#Cache para almacenar usuarios y grupos para poder obtener su id y nombre
user_cache = {}
group_cache = {}


def process_sheet_data(data):
    for row in data:
        if len(row) < 13:  # Validar que la fila tenga al menos 13 columnas
            print(f"Fila incompleta, se omite: {row}")
            continue

        # Validar que la celda `M` (índice 12) esté vacía
        if row[12].strip():  # Si contiene datos, omitir la fila
            print(f"La celda 'M' contiene datos, se omite la fila: {row}")
            continue

        # Obtener y preparar datos para crear la tarea
        task_name = f"{row[2].strip()} {row[3].strip()}"  # Concatenar C y D
        task_description = row[4].strip() if len(row) > 4 else ""  # Celda E

        # Convertir nombres en IDs con `get_user_id_by_name`
        responsible_name = row[6].strip() if len(row) > 6 else ""  # Columna G
        creator_name = row[7].strip() if len(row) > 7 else ""  # Columna H

        responsible_id = get_user_id_by_name(responsible_name)
        creator_id = get_user_id_by_name(creator_name)

        # Validar que los IDs sean válidos
        if not responsible_id:
            print(f"Error: No se encontró el ID del Responsable '{responsible_name}'")
            continue

        if not creator_id:
            print(f"Error: No se encontró el ID del Creador '{creator_name}'")
            continue

        # Obtener IDs para participantes y observadores
        participants = []
        if len(row) > 8 and row[8].strip():  # Columna I
            participants = [
                get_user_id_by_name(name.strip())
                for name in row[8].strip().split(",")
                if name.strip()
            ]
            # Filtrar IDs inválidos
            participants = [id for id in participants if id]

        observers = []
        if len(row) > 9 and row[9].strip():  # Columna J
            observers = [
                get_user_id_by_name(name.strip())
                for name in row[9].strip().split(",")
                if name.strip()
            ]
            # Filtrar IDs inválidos
            observers = [id for id in observers if id]

        # Obtener etiquetas (tags)
        tags = []
        if len(row) > 10 and row[10].strip():  # Columna K
            tags = [tag.strip() for tag in row[10].strip().split(",") if tag.strip()]

        # Obtener ID del grupo
        group_name = row[11].strip() if len(row) > 11 else ""  # Columna L
        group_id = get_group_id_by_name(group_name)

        # Crear la tarea en Bitrix
        task_data = {
            "TITLE": task_name,
            "DESCRIPTION": task_description,
            "RESPONSIBLE_ID": responsible_id,
            "CREATED_BY": creator_id,
            "ACCOMPLICES": participants,
            "AUDITORS": observers,
            "TAGS": tags,
            "GROUP_ID": group_id,
        }

        # Verificar datos enviados
        print(f"Tarea preparada: {task_data}")

        create_task_in_bitrix(task_data)


if __name__ == "__main__":
    # Prueba de la función get_user_id_by_name
    user_name = "Oliver Suárez"  # Cambia esto por el nombre real
    user_id = get_user_id_by_name(user_name)
    if user_id:
        print(f"El ID de '{user_name}' es {user_id}")
    else:
        print(f"No se encontró el usuario con el nombre '{user_name}'")

    data = read_from_sheet(SHEET_ID, READ_RANGE_NAME)
    if data:
        for row in data:
            if len(row) < 13:  # Validar que la fila tenga al menos 13 columnas
                print(f"Fila incompleta, se omite: {row}")
                continue

            # Validar que la celda `M` (índice 12) contenga datos
            if row[12].strip():  # Celda M
                print(f"La celda 'M' contiene datos, se omite la fila: {row}")
                continue

            # Obtener y preparar datos para crear la tarea
            task_name = f"{row[2].strip()} {row[3].strip()}"  # Concatenar C y D
            task_description = row[4].strip() if len(row) > 4 else ""  # Celda E

            # Convertir nombres en IDs con `get_user_id_by_name`
            responsible_name = row[6].strip() if len(row) > 6 else ""  # Columna G
            creator_name = row[7].strip() if len(row) > 7 else ""  # Columna H

            responsible_id = get_user_id_by_name(responsible_name)
            creator_id = get_user_id_by_name(creator_name)

            # Validar que los IDs sean válidos
            if not responsible_id:
                print(f"Error: No se encontró el ID del Responsable '{responsible_name}'")
                continue

            if not creator_id:
                print(f"Error: No se encontró el ID del Creador '{creator_name}'")
                continue

            # Obtener IDs para participantes y observadores
            participants = []
            if len(row) > 8 and row[8].strip():  # Columna I
                participants = [
                    get_user_id_by_name(name.strip())
                    for name in row[8].strip().split(",")
                    if name.strip()
                ]
                # Filtrar IDs inválidos
                participants = [id for id in participants if id]

            observers = []
            if len(row) > 9 and row[9].strip():  # Columna J
                observers = [
                    get_user_id_by_name(name.strip())
                    for name in row[9].strip().split(",")
                    if name.strip()
                ]
                # Filtrar IDs inválidos
                observers = [id for id in observers if id]

            # Obtener etiquetas (tags)
            tags = []
            if len(row) > 10 and row[10].strip():  # Columna K
                tags = [tag.strip() for tag in row[10].strip().split(",") if tag.strip()]

            # Obtener ID del grupo
            group_name = row[11].strip() if len(row) > 11 else ""  # Columna L
            group_id = get_group_id_by_name(group_name)

            # Crear la tarea en Bitrix
            task_data = {
                "TITLE": task_name,
                "DESCRIPTION": task_description,
                "RESPONSIBLE_ID": responsible_id,
                "CREATED_BY": creator_id,
                "ACCOMPLICES": participants,
                "AUDITORS": observers,
                "TAGS": tags,
                "GROUP_ID": group_id,
            }

            # Verificar datos enviados
            print(f"Tarea preparada: {task_data}")

            create_task_in_bitrix(task_data)
    else:
        print("No se encontraron datos en la hoja.")

    # Obtener tareas de Bitrix y escribirlas en la hoja de cálculo
    tasks = get_tasks_from_bitrix()
    if tasks:
        write_tasks_to_sheet(SHEET_ID, tasks)
    else:
        print("No se encontraron tareas.")

este es services/google_sheets.py y es donde va todo lo de google_sheets

import json
import re
import requests

# Cargar configuraciones desde settings.json
with open("settings/settings.json", "r") as file:
    config = json.load(file)

# 🔹 Cargar configuraciones
settings = json.load(open("settings/settings.json"))
user_config = json.load(open("user_config/user_id.json"))

# 🔹 Construcción de URLs dinámicas
BITRIX_BASE_URL = settings["BITRIX_BASE_URL"].replace("{USER_ID}", user_config["USER_ID"])
BITRIX_URLS = {key: f"{BITRIX_BASE_URL}{endpoint}" for key, endpoint in settings["ENDPOINTS"].items()}

headers = {"Content-Type": "application/json", "Accept": "application/json"}


user_cache = {}
group_cache = {}


def create_task_in_bitrix(task_data):
    required_fields = ["TITLE", "RESPONSIBLE_ID", "CREATED_BY"]

    # Verifica si faltan campos obligatorios
    for field in required_fields:
        if not task_data.get(field):
            print(f"Falta el campo obligatorio '{field}' en la tarea: {task_data}")
            return

    # Log detallado: Mostrar los datos que se enviarán
    print(f"Datos enviados a Bitrix: {task_data}")

    # Extraer los IDs para validación adicional y mostrarlos
    responsible_id = task_data.get("RESPONSIBLE_ID")
    creator_id = task_data.get("CREATED_BY")
    print(f"RESPONSIBLE_ID: {responsible_id}, CREATED_BY: {creator_id}")

    # Realizar la solicitud al API
    response = requests.post(
        BITRIX_URLS["BITRIX_CREATE_TASK_URL"],
        json={"fields": task_data},
        headers=headers,
    )
    if response.status_code == 200:
        print("Tarea creada exitosamente:", response.json())
    else:
        print(f"Error al crear la tarea: {response.status_code} - {response.text}")


# 🔹 Función para obtener tareas desde Bitrix con filtro por nombre
#def get_tasks_from_bitrix():
#    response = requests.post(BITRIX_URLS["BITRIX_GET_TASKS_URL"], verify=False)
#
#    if response.status_code == 200:
#        data = response.json()
#        tasks = data.get("result", {}).get("tasks", [])
#
#        # 🔹 Filtrar solo las tareas cuyo nombre comienza con "KTK0"
#        filtered_tasks = [task for task in tasks if task.get("title", "").startswith("KTK0")]
#
#        return filtered_tasks if filtered_tasks else []
#
#    print(f"❌ Error al obtener tareas: {response.status_code} - {response.text}")
#    return []

# 🔹 Función para obtener tareas desde Bitrix
def get_tasks_from_bitrix():
    response = requests.post(BITRIX_URLS["BITRIX_GET_TASKS_URL"], verify=False)

    if response.status_code == 200:
        data = response.json()
        tasks = data.get("result", {}).get("tasks", [])
        return tasks if tasks else []

    print(f"❌ Error al obtener tareas: {response.status_code} - {response.text}")
    return []

def get_user_name(user_id):
    if user_id in user_cache:
        return user_cache[user_id]

    response = requests.post(BITRIX_URLS["BITRIX_USER_INFO"], json={"ID": user_id}, verify=False)
    if response.status_code == 200:
        user_info = response.json().get("result", [])
        if user_info:
            user = user_info[0]
            name = f"{user.get('NAME', 'Sin nombre')} {user.get('LAST_NAME', 'Sin apellido')}"
            user_cache[user_id] = name
            return name
    else:
        print(
            f"Error al obtener información del usuario {user_id}: {response.status_code} - {response.text}"
        )
    return "Sin información"


def get_group_name(group_id):
    if not group_id:
        return "Sin grupo"

    if group_id in group_cache:
        return group_cache[group_id]

    response = requests.post(
        BITRIX_URLS["BITRIX_GROUP_INFO"], json={"FILTER": {"ID": group_id}}, verify=False
    )
    if response.status_code == 200:
        group_info = response.json().get("result", [])
        if group_info:
            group_name = group_info[0].get("NAME", "Sin nombre")
            group_cache[group_id] = group_name
            return group_name
    else:
        print(
            f"Error al obtener información del grupo {group_id}: {response.status_code} - {response.text}"
        )
    return "Sin información"



def get_user_id_by_name(full_name):
    if full_name in user_cache:
        return user_cache[full_name]

    name_parts = full_name.split(" ", 1)
    first_name = name_parts[0]
    last_name = name_parts[1] if len(name_parts) > 1 else ""

    response = requests.post(
        BITRIX_URLS["BITRIX_USER_INFO"],
        json={"FILTER": {"NAME": first_name, "LAST_NAME": last_name}},
        verify=False,
    )

    if response.status_code == 200:
        user_info = response.json().get("result", [])
        if user_info:
            user_id = user_info[0].get("ID")
            user_cache[full_name] = user_id
            return user_id
    else:
        print(
            f"Error al obtener el ID del usuario '{full_name}': {response.status_code} - {response.text}"
        )

    return None


def get_group_id_by_name(group_name):
    if group_name in group_cache:
        return group_cache[group_name]

    response = requests.post(
        BITRIX_URLS["BITRIX_GROUP_INFO"],
        json={"FILTER": {"NAME": group_name}},  # Cambia "NAME" si es necesario
        verify=False,
    )

    print(
        f"Respuesta completa para el grupo '{group_name}': {response.json()}"
    )  # Agregado

    if response.status_code == 200:
        group_info = response.json().get("result", [])
        if group_info:
            group_id = group_info[0].get("ID")
            group_cache[group_name] = group_id
            return group_id
    else:
        print(
            f"Error al obtener el ID del grupo '{group_name}': {response.status_code} - {response.text}"
        )

    return None


def get_last_comment(task_id):
    params = [task_id, {"POST_DATE": "desc"}]
    response = requests.post(BITRIX_URLS["GET_COMMENTS_LIST_URL"], json=params, verify=False)
    if response.status_code == 200:
        comments = response.json().get("result", [])
        return comments[0].get("ID") if comments else None
    else:
        print(
            f"Error al obtener comentarios de la tarea {task_id}: {response.status_code} - {response.text}"
        )
        return None


def get_comment_details(task_id, comment_id):
    params = [task_id, comment_id]
    response = requests.post(BITRIX_URLS["GET_COMMENT_DETAILS_URL"], json=params, verify=False)
    if response.status_code == 200:
        comment = response.json().get("result", {})
        return comment.get("POST_MESSAGE", "Sin contenido")
    else:
        print(
            f"Error al obtener detalles del comentario {comment_id}: {response.status_code} - {response.text}"
        )
        return "Sin contenido"

este es services/bitrix.py y es donde va todo lo de bitrix

import requests
import json
import re
import urllib3
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# Desactivar advertencias SSL (opcional, solo si Bitrix usa HTTPS sin certificado válido)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Función para cargar JSONs de configuración de forma segura
def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        print(f"❌ Error al cargar {filename}")
        exit(1)

# Cargar configuraciones desde los archivos JSON
settings = load_json("settings/settings.json")
user_config = load_json("user_config/user_id.json")
sheet_config = load_json("settings/SheetURL.json")

# Extraer ID de la hoja desde la URL en `SheetURL.json`
def extract_sheet_id(sheet_url):
    match = re.search(r"/d/([a-zA-Z0-9-_]+)/", sheet_url)
    return match.group(1) if match else None

SHEET_ID = extract_sheet_id(sheet_config["SHEET_URL"])
if not SHEET_ID:
    print("No se pudo extraer el ID de la hoja de cálculo.")
    exit(1)

# Construcción de URLs dinámicas de Bitrix
BITRIX_BASE_URL = settings["BITRIX_BASE_URL"].replace("{USER_ID}", user_config["USER_ID"])
BITRIX_URLS = {key: f"{BITRIX_BASE_URL}{endpoint}" for key, endpoint in settings["ENDPOINTS"].items()}

# Configuración de Google Sheets
SERVICE_ACCOUNT_FILE = "fit-guide-433118-p4-193f4862b36c.json"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
service = build("sheets", "v4", credentials=credentials)

WRITE_RANGE_NAME = "Hoja 2!R2:R"

# 🔹 Función para obtener tareas desde Bitrix
def get_tasks_from_bitrix():
    response = requests.post(BITRIX_URLS["BITRIX_GET_TASKS_URL"], verify=False)

    if response.status_code == 200:
        data = response.json()
        tasks = data.get("result", {}).get("tasks", [])
        return tasks if tasks else []

    print(f"❌ Error al obtener tareas: {response.status_code} - {response.text}")
    return []

# 🔹 Función para obtener el Resumen del Estado de la tarea
def get_resume_task(taskId):
    params = {"taskId": taskId}
    headers = {"Content-Type": "application/json"}

    response = requests.post(BITRIX_URLS["GET_RESUME"], json=params, headers=headers, verify=False)

    if response.status_code == 200:
        data = response.json()

        if "result" in data and isinstance(data["result"], list) and len(data["result"]) > 0:
            return data["result"][0].get("text", "Sin comentarios disponibles").strip()

    print(f"❌ Error al obtener resumen de la tarea {taskId}: {response.status_code} - {response.text}")
    return "Sin resúmen"

# 🔹 Función para actualizar Google Sheets con los resúmenes de estado
def update_sheet_with_summaries(sheet_id, tasks):
    if not tasks:
        print("⚠️ No hay tareas para actualizar en Google Sheets.")
        return

    try:
        values = []
        for task in tasks:
            task_id = task.get("id")
            resumen = get_resume_task(task_id)
            print(f"📌 Tarea {task_id}: {resumen}")  # Para depuración
            values.append([resumen])

        body = {"values": values}

        # Actualiza Google Sheets
        response = service.spreadsheets().values().update(
            spreadsheetId=sheet_id,
            range=WRITE_RANGE_NAME,
            valueInputOption="USER_ENTERED",
            body=body
        ).execute()

        print(f"✅ Se han actualizado {response.get('updatedCells', 0)} celdas en Google Sheets.")
    except Exception as e:
        print(f"❌ Error al actualizar Google Sheets: {e}")

# 🔹 Ejecutar el script
if __name__ == "__main__":
    print("📥 Obteniendo resúmenes de tareas desde Bitrix...")
    tasks = get_tasks_from_bitrix()

    if tasks:
        update_sheet_with_summaries(SHEET_ID, tasks)
    else:
        print("⚠️ No se encontraron tareas en Bitrix.")

y este es scripts/ResumeTask.py, y es donde treae el resumen de la tarea

Quiero que al ejecutarlo muestre un menu en la consola de la siguiente manera:

Seleccione una opción:

1. Iniciar programa(solo si es la primera vez que ejecutas Ktask)
2. Obtener tareas
3. Crear tareas
4. Resumen del estado de tarea

al ingresar 1 quiero que se ejecute tal como esta, si se selecciona 2 quiero que
traiga las tareas, al ingresar 3 que cree las tareas y al seleccionar el 4 que traiga el Resumen

